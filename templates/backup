<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}Welcome{% endblock %}</title>

    <!-- dd Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">

    <style>
        body {
            font-family: Arial, Helvetica, sans-serif;
            background-color: #f4f4f4;
            margin: 0;
            line-height: 1.6;
            padding-top: 50px;
        }

        header {
            background-color: #1b52a4;
            color: white;
            padding: 15px 0;
            text-align: center;
            position: fixed;
            width: 100%;
            top: 0;
            z-index: 10;
        }

        nav {
            background-color: #1b52a4;
            padding: 10px 15px;
            text-align: center;
            margin-top: 50px; /* Offset for the fixed header */
        }

        nav a {
            color: white;
            padding: 10px 20px;
            text-decoration: none;
            font-size: 1.1em;
            margin: 0 10px;
        }

        nav a:hover {
            text-decoration: underline;
        }

        .container {
            max-width: 100%;
            margin: 20px auto;
            background-color: white;
            padding: 30px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
            border-radius: 8px;
        }

        h1 {
            color: rgb(5, 5, 5);
            text-align: center;
            margin-bottom: 30px;
        }

        .form-group {
            margin-bottom: 20px;
        }

        label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }

        input[type="text"], input[type="number"] {
            width: 100%;
            padding: 10px;
            border: 1px solid #5b5151;
            border-radius: 5px;
            box-sizing: border-box;
        }

        input[type="text"]::placeholder, input[type="number"]::placeholder {
            color: #666;
            font-size: 1.1em;
        }

        button[type="submit"], .btn-primary {
            background-color: #007bff !important; /* âœ… Ensures blue */
            border-color: #007bff !important;
            color: white;
        }

        button[type="submit"]:hover, .btn-primary:hover {
            background-color: #0056b3 !important;
            border-color: #0056b3 !important;
        }

        .btn-outline-primary {
            border-color: #007bff !important;
            color: #007bff !important;
        }

        .btn-outline-primary:hover {
            background-color: #007bff !important;
            color: white !important;
        }

        .back-button {
            background-color: #1b52a4;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 1.1em;
            transition: background-color 0.3s ease;
            margin-bottom: 20px;
        }

        .back-button:hover {
            background-color: #164280;
        }

        footer {
            text-align: center;
            padding: 20px 0;
            background-color: #333;
            color: white;
            position: fixed;
            bottom: 0;
            width: 100%;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
            font-size: 1.1em;
            word-wrap: break-word; /* Ensures long words wrap */
            table-layout: auto; /* Allows the table columns to resize as needed */
        }

        th, td {
            padding: 15px;
            text-align: center; /* Aligns text to the left for readability */
            border-bottom: 1px solid #ddd;
            word-wrap: break-word; /* Prevents text from overflowing */
        }

        th {
            background-color: #1b52a4;
            color: white;
            font-weight: bold;
            position: sticky;
            top: 105px;
            z-index: 1;
        }

        td {
            text-align: center; /* Keeps the content left-aligned */
        }

        td .long-text {
            word-wrap: break-word;
            overflow-wrap: break-word;
            white-space: normal; /* Ensures content wraps properly in longer text */
        }

        @media screen and (max-width: 768px) {
            table, th, td {
                font-size: 0.9em;
            }

            td, th {
                padding: 10px;
            }
        }

        .plot-margin {
            margin-top: 50px; 
        }
    </style>
</head>
<body>

    <header>
        <h1>{% block header %}Welcome to the T2D Web Development Project{% endblock %}</h1>
    </header>

    <nav>
        <a href="/">Home</a>
        <a href="/about">About</a>
    </nav>

    <div class="container">
        {% block content %}
        {% endblock %}
    </div>

    <footer>
        <p>&copy; 2025 T2D Project. All rights reserved.</p>
    </footer>

    <!-- Bootstrap JavaScript -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

</body>
</html>




//// index.html below 

{% extends 'base.html' %}

{% block title %}Home - T2D Project{% endblock %}

{% block content %}
<div class="container">
    <h1>SNP Search</h1>
    <p>Use this form to search for SNP information. Fill in the required fields and click "Search" to see the results.</p>
    <ul>
        <li><strong>SNP Name:</strong> Enter the SNP identifier, e.g., <code>rs12345</code>.</li>
        <li><strong>Chromosome:</strong> Specify the chromosome number, e.g., <code>1</code> or <code>X</code>.</li>
        <li><strong>Start Coordinate:</strong> Provide the starting position of the SNP on the chromosome.</li>
        <li><strong>End Coordinate:</strong> Enter the ending position of the SNP on the chromosome.</li>
        <li><strong>Gene Name (Optional):</strong> Include the associated gene name, if applicable.</li>
    </ul>
    <form method="POST" action="{{ url_for('home') }}">
        <!-- SNP Name -->
        <div class="form-group">
            <label for="snp_name">SNP ID:</label>
            <input type="text" id="snp_name" name="snp_name" class="form-control" placeholder="e.g., rs12345">
        </div>
        <!-- Chromosome -->
        <div class="form-group">
            <label for="chromosome">Chromosome:</label>
            <input type="text" id="chromosome" name="chromosome" class="form-control" placeholder="e.g., 1">
        </div>
         <!-- Start Position -->
        <div class="form-group">
            <label for="start">Start Coordinate:</label>
            <input type="number" id="start" name="start" class="form-control" placeholder="e.g., 123456">
        </div>
        <!-- End Position -->
        <div class="form-group">
            <label for="end">End Coordinate:</label>
            <input type="number" id="end" name="end" class="form-control" placeholder="e.g., 123789">
        </div> 
        <!-- Gene Name -->
        <div class="form-group">
            <label for="gene_name">Gene Name:</label>
            <input type="text" id="gene_name" name="gene_name" class="form-control" placeholder="e.g., GENE1">
        </div>
        <button type="submit" class="btn btn-primary">Search</button>
    </form>
</div>
{% endblock %}



///// snp_results.html//////
{% extends 'base.html' %}

{% block title %}SNP Query Results - T2D Project{% endblock %}

{% block content %}
    <div class="container">
        <div class="top-buttons">
            <!-- Back button to return to the previous search page -->
            <button class="back-button" onclick="window.history.back();">Back to Search</button>

            <!-- Form to select population and chromosome for analysis -->
            <form method="POST" action="{{ url_for('population_analysis') }}">
                <label for="selected_population">Select Population:</label>
                <select name="selected_population" id="selected_population" required>
                    <option value="BEB">BEB</option>
                    <option value="GIH">GIH</option>
                    <option value="ITU">ITU</option>
                    <option value="PJL">PJL</option>
                    <option value="STU">STU</option>
                </select>

                <!-- Dropdown to select chromosome for analysis -->
                <label for="selected_chromosome">Chromosome:</label>
                <select name="selected_chromosome" id="selected_chromosome">
                    <option value="2">2</option>
                    <option value="3">3</option>
                    <option value="6">6</option>
                    <option value="8">8</option>
                    <option value="9" selected>9</option>
                    <option value="10">10</option>
                    <option value="11">11</option>
                    <option value="12">12</option>
                    <option value="20">20</option>
                </select>

                <button type="submit" class="btn btn-primary">Analyse Population</button>
            </form>
        </div>

        <h1>SNP Query Results</h1>

        <style>
            /* CSS for dropdown */
            .dropdown-content {
                display: none;
                background-color: #f9f9f9;
                padding: 10px;
                border: 1px solid #ccc;
                margin-top: 5px;
                border-radius: 5px;
            }

            .dropdown-content table {
                width: 100%;
                border-collapse: collapse;
            }

            .dropdown-content th, .dropdown-content td {
                padding: 8px;
                border: 1px solid #ddd;
                text-align: center;
            }

            .toggle-btn {
                background-color: #1b52a4;
                color: white;
                border: none;
                padding: 8px;
                cursor: pointer;
                border-radius: 4px;
                font-size: 14px;
            }

            .toggle-btn:hover {
                background-color: #164280;
            }
        </style>

        {% if snp_info %}
        <!-- Form to display SNP information and allow selection for further analysis -->
        <form method="POST" action="{{ url_for('population_analysis') }}">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Select</th>
                        <th>SNP ID</th>
                        <th>Chromosome</th>
                        <th>Position</th>
                        <th>Gene</th>
                        <th>Reference Allele</th>
                        <th>Alternative Allele</th>
                        <th>p-value</th>
                        <th>View Positive Selection Summary Statistics</th>
                    </tr>
                </thead>
                <tbody>
                    {% for snp in snp_info %}
                    <tr>
                        <td><input type="checkbox" name="selected_snps" value="{{ snp.snp_id }}"></td>
                        <td>{{ snp.snp_id }}</td>
                        <td>{{ snp.chromosome }}</td>
                        <td>{{ snp.grch38_start }}</td>
                        <td>
                            {% if snp.gene_name and snp.gene_name != "No Mapped Gene" %}
                                {% set genes = snp.gene_name.split() %}  {# Split multiple genes by space #}
                                {% for gene in genes %}
                                    <a href="{{ url_for('gene_terms', gene_name=gene) }}">{{ gene }}</a>{% if not loop.last %}, {% endif %}
                                {% endfor %}
                            {% else %}
                                <span>Unknown</span>
                            {% endif %}
                        </td>
                        <td>{{ snp.reference_allele }}</td>
                        <td>{{ snp.alternative_allele }}</td>
                        <td>{{ snp.p_value }}</td>
                        <td>
                            <button type="button" class="toggle-btn" onclick="toggleDropdown('{{ snp.snp_id }}')">
                                Show Stats
                            </button>
                        </td>
                    </tr>
                    
                    <!-- Dropdown content for SNP statistics -->
                    <tr id="dropdown-{{ snp.snp_id }}" class="dropdown-content">
                        <td colspan="9">
                            <strong>Statistics for SNP {{ snp.snp_id }}</strong>
                            <table>
                                <!-- table headers -->
                                <thead>
                                    <tr>
                                        <th>Population</th>
                                        <th>Tajima's D</th>
                                        <th>CLR</th>
                                        <th>Î± (Strength of CLR selection)</th>
                                        <th>FST(vs Europe)</th>  
                                    </tr>
                                </thead>

                                <!-- Updated table body (includes FST) -->
                                <tbody>
                                    {% for pop_stat in snp.positive_selection %}
                                    <tr>
                                        <td>{{ pop_stat.population }}</td>
                                        <td>{{ pop_stat.tajima_d if pop_stat.tajima_d is not none else 'N/A' }}</td>
                                        <td>{{ pop_stat.clr if pop_stat.clr is not none else 'N/A' }}</td>
                                        <td>{{ pop_stat.alpha if pop_stat.alpha is not none else 'N/A' }}</td>
                                        <td>{{ pop_stat.fst if pop_stat.fst is not none else 'N/A' }}</td> <!-- NEW cell -->
                                    </tr>
                                    {% endfor %}
                                </tbody>
                            </table>
                        </td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
            <button type="submit" class="btn btn-primary">Get Population Info</button>
        </form>
        {% else %}
        <p>No results found. Try another search.</p>
        {% endif %}
    </div>

    <script>
        // Function to toggle the display of dropdown content for SNP statistics
        function toggleDropdown(snpId) {
            var dropdown = document.getElementById("dropdown-" + snpId);
            if (dropdown.style.display === "none" || dropdown.style.display === "") {
                dropdown.style.display = "table-row";
            } else {
                dropdown.style.display = "none";
            }
        }
    </script>
{% endblock %}


////// ontology,html///
{% extends 'base.html' %}

{% block title %}Gene Ontology Terms for {{ gene_name }}{% endblock %}

{% block content %}
    <div class="container">
        <button class="back-button" onclick="window.history.back();">Back</button>
        <h1 class="main-title">Gene Ontology Terms for <span class="highlight">{{ gene_name }}</span></h1>

        {% if go_terms %}
            <div class="ontology-sections">
                {% for category, terms in go_terms.items() %}
                    <div class="ontology-category">
                        <h2>{{ category.replace('_', ' ') | title }}</h2>
                        {% if terms %}
                            <div class="go-card-container">
                                {% for term in terms %}
                                    <div class="go-card">
                                        <h3 class="go-title">{{ term.id }}: {{ term.name }}</h3>
                                        <p class="go-description"><strong>Description:</strong> {{ term.description }}</p>
                                        {% if term.synonyms %}
                                            <p class="go-synonyms"><strong>Synonyms:</strong> {{ term.synonyms | join(', ') }}</p>
                                        {% endif %}
                                    </div>
                                {% endfor %}
                            </div>
                        {% else %}
                            <p class="no-terms">No terms found in this category.</p>
                        {% endif %}
                    </div>
                {% endfor %}
            </div>
        {% else %}
            <p class="no-results">No Gene Ontology terms found for this gene.</p>
        {% endif %}
    </div>

    <style>
        /* General container styling */
        .container {
            max-width: 900px;
            margin: auto;
            padding: 20px;
        }

        .highlight {
            color: #1b52a4;
            font-weight: bold;
        }

        .main-title {
            text-align: center;
            font-size: 28px;
            font-weight: bold;
            margin-bottom: 20px;
            color: #333;
        }

        /* Ontology category section */
        .ontology-category {
            background: #f8f9fa;
            padding: 15px;
            margin-bottom: 20px;
            border-radius: 10px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }

        .ontology-category h2 {
            color: #1b52a4;
            font-size: 22px;
            margin-bottom: 15px;
        }

        /* GO term cards */
        .go-card-container {
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
        }

        .go-card {
            background: white;
            padding: 15px;
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
            flex: 1 1 calc(50% - 15px);
            min-width: 250px;
        }

        .go-title {
            font-size: 18px;
            font-weight: bold;
            color: #1b52a4;
            margin-bottom: 10px;
        }

        .go-description, .go-synonyms {
            font-size: 14px;
            color: #444;
        }

        .no-terms, .no-results {
            text-align: center;
            color: #888;
            font-style: italic;
        }

        /* Responsive design */
        @media (max-width: 600px) {
            .go-card {
                flex: 1 1 100%;
            }
        }

        .back-button {
            display: inline-block;
            background: #1b52a4;
            color: white;
            padding: 10px 15px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            text-decoration: none;
            margin-bottom: 15px;
        }

        .back-button:hover {
            background: #164280;
        }
    </style>
{% endblock %}


/////////////population_analysis.html///////////////
{% extends 'base.html' %}

{% block title %}Population Analysis{% endblock %}

{% block content %}
    <div class="container">
        <h1>Analysis for Positive Selection</h1>

        <!-- Display selected population information -->
        {% for pop, info in selected_population_info.items() %}
            <p><strong>Population Chosen for Analysis: {{ info }} ({{ pop }})</p>
        {% endfor %}

        <!-- Checkbox for filtering T2D-associated SNPs -->
        <div class="form-check form-check-inline" style="margin-top: 20px;">
            <label class="form-check-label" for="t2d_filter" style="display: inline-block;">Check to view T2D-associated SNPs</label>
            <input class="form-check-input" type="checkbox" id="t2d_filter" style="display: inline-block;" onchange="updatePlot()">
        </div>

         <!-- Container for interactive plots -->
        <div id="plots-container"></div> 

        <!-- Region Selection Form -->
        <div class="region-selection">
            <h3>Select Region of Interest</h3>
            <form id="region-form">
                <!-- Hidden field to store selected chromosome -->
                <input type="hidden" id="selected_chromosome" name="selected_chromosome" value="{{ selected_chromosome }}">

                <!-- User input fields for defining a genomic region -->
                <label for="region_start">Start Position:</label>
                <input type="number" id="region_start" name="region_start" placeholder="e.g., 100000">

                <label for="region_end">End Position:</label>
                <input type="number" id="region_end" name="region_end" placeholder="e.g., 500000">

                <label for="gene_name">Gene Name (optional):</label>
                <input type="text" id="gene_name" name="gene_name" placeholder="e.g., TCF7L2">

                <!-- Buttons for selecting populations -->
                <div class="col-12">
                    <label class="form-label">Select Population(s) for Region Analysis:</label>
                    <div class="btn-group d-flex flex-wrap" role="group" id="population-buttons">
                        {% for pop in ["BEB", "GIH", "ITU", "PJL", "STU"] %}
                            <button type="button" class="btn btn-outline-secondary population-btn m-1" 
                                    data-population="{{ pop }}" onclick="togglePopulation(this)">
                                {{ pop }}
                            </button>
                        {% endfor %}
                    </div>
                    <input type="hidden" id="selected_populations" name="selected_populations">
                </div>

                <!-- Button to fetch and display region-specific analysis -->
                <button type="button" onclick="fetchRegionData()">Show Region Graph</button>
                <!-- Checkbox for filtering T2D-associated SNPs in region analysis -->
                <div class="form-check form-check-inline" style="margin-top: 20px;">
                    <label class="form-check-label" for="t2d_region_filter" style="display: inline-block;">Check to view T2D-associated SNPs</label>
                    <input class="form-check-input" type="checkbox" id="t2d_region_filter" style="display: inline-block;" checked onchange="fetchRegionData()">
                </div>
            </form>
        </div>

        <!-- Buttons for downloading analysis data -->
        <div class="d-flex justify-content-end mt-3">
            <button type="button" class="btn btn-success me-2" onclick="downloadTajimaD()">Download Tajima's D Data</button>
            <button type="button" class="btn btn-success" onclick="downloadCLR()">Download CLR Data</button>
        </div>

         <!-- Container for selected chromosomal region plot -->
        <div id="region-plot-container"></div> 

        <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
        <script>
            let tajimaDData = {{ tajima_d_data | safe }};
            let t2dSnps = {{ t2d_snp_data | safe }};
            let clrData = {{ clr_data | safe }};

            // Function to update the plot based on the selected populations and T2D filter    
            function updatePlot() {
                let showT2D = document.getElementById("t2d_filter").checked;
                let container = document.getElementById("plots-container");
                container.innerHTML = ""; // Clear previous plots

                // Iterate over each population and create Tajima's D plot
                for (let pop in tajimaDData) {

                    let tajimaTitle = document.createElement("h2");
                    tajimaTitle.innerText = `Tajima's D values over chromosome {{ selected_chromosome }} positions for ${pop}`;
                    tajimaTitle.classList.add("plot-margin");
                    container.appendChild(tajimaTitle);

                    let plotDiv = document.createElement("div");
                    plotDiv.id = "plot-" + pop;
                    container.appendChild(plotDiv);

                    // Extract bin positions and Tajima's D values for the current population
                    let binPositions = tajimaDData[pop].map(d => (d.bin_start + d.bin_end) / 2);
                    let tajimaValues = tajimaDData[pop].map(d => d.tajima_d);

                    let tajimaTraces = [{
                        x: binPositions,
                        y: tajimaValues,
                        mode: 'lines',
                        name: `Tajima's D - ${pop}`,
                        line: { color: "blue" }
                    }];

                    // Overlay T2D-associated SNPS if checkbox is checked
                    if (showT2D) {
                        let snpPositions = t2dSnps.map(snp => snp.position);
                        let snpValues = snpPositions.map(pos => {
                            let bin = tajimaDData[pop].find(curr => pos >= curr.bin_start && pos <= curr.bin_end);
                            return bin ? bin.tajima_d : null;
                        });

                        let t2dSnpTrace = {
                            x: snpPositions,
                            y: snpValues,
                            mode: 'markers',
                            text: t2dSnps.map(snp => snp.snp_id),
                            textposition: "top center",
                            marker: {color: 'red', size: 10},
                            name: 'T2D SNPs'
                        };
                        tajimaTraces.push(t2dSnpTrace);
                    }
                    let layout = {
                            xaxis: { title: "Chromosomal Position (bp)" },
                            yaxis: { title: "D" },
                            showlegend: true,
                            height: 600,
                            width: 1600,
                            margin: { l: 50, r: 50, t: 50, b: 50 }
                    };

                    Plotly.newPlot(plotDiv.id, tajimaTraces, layout);

                    // Create CLR plot similar to Tajima's D plot
                    let clrTitle = document.createElement("h2");
                    clrTitle.innerText = `CLR values over chromosome {{ selected_chromosome }} positions for ${pop}`;
                    clrTitle.classList.add("plot-margin");
                    container.appendChild(clrTitle);

                    let clrPlotDiv = document.createElement("div");
                    clrPlotDiv.id = "clr-plot-" + pop;
                    container.appendChild(clrPlotDiv);

                    let clrPositions = clrData[pop].map(d => d.position);
                    let clrValues = clrData[pop].map(d => d.clr);

                    let clrTraces = [{
                        x: clrPositions,
                        y: clrValues,
                        mode: 'markers',
                        name: `CLR - ${pop}`,
                        marker: { color: "blue", size: 2 }
                    }];

                    // Add significance threshold line
                    let significanceThresholdTrace = {
                        x: [Math.min(...clrPositions), Math.max(...clrPositions)],
                        y: [4.11, 4.11],
                        mode: 'lines',
                        name: 'Significance threshold adjusted for <br>spatial correlation (Î± = 0.05)',
                        line: {
                            dash: 'dash',
                            color: 'red',
                            width: 2
                        }
                    };
                    clrTraces.push(significanceThresholdTrace);

                    // Overlay T2D-associated SNPS if checkbox is checked
                    if (showT2D) {
                        let snpPositions = t2dSnps.map(snp => snp.position);
                        let snpValues = snpPositions.map(pos => {
                            let closestClr = clrData[pop].reduce((closest, curr) => {
                                return Math.abs(curr.position - pos) < Math.abs(closest.position - pos) ? curr : closest;
                            }, clrData[pop][0]);
                            return closestClr ? closestClr.clr : null;
                        });

                        let t2dSnpTrace = {
                            x: snpPositions,
                            y: snpValues,
                            mode: 'markers',
                            text: t2dSnps.map(snp => snp.snp_id),
                            textposition: "top center",
                            marker: {color: 'red', size: 10},
                            name: 'T2D SNPs'
                        };
                        clrTraces.push(t2dSnpTrace);
                    }                  

                    let clrLayout = {
                                xaxis: { title: "Chromosomal Position (bp)" },
                                yaxis: { title: "CLR" },
                                showlegend: true,
                                height: 600,
                                width: 1600,
                                margin: { l: 50, r: 50, t: 50, b: 50 }
                    };

                    Plotly.newPlot(clrPlotDiv.id, clrTraces, clrLayout);
                }
            }

            // Store selected populations
            let selectedPopulations = new Set(); 

            // Function to toggle population selection (affects regional analysis)
            function togglePopulation(button) {
                let pop = button.getAttribute("data-population");

                if (selectedPopulations.has(pop)) {
                    selectedPopulations.delete(pop);
                    button.classList.remove("btn-primary");
                    button.classList.add("btn-outline-primary");
                } else {
                    selectedPopulations.add(pop);
                    button.classList.remove("btn-outline-primary");
                    button.classList.add("btn-primary");
                }

                // Update hidden input field to store selected populations
                document.getElementById("selected_populations").value = Array.from(selectedPopulations).join(",");
            }

            // Function to fetch and display region-specific analysis
            function fetchRegionData() {
                let start = document.getElementById("region_start").value;
                let end = document.getElementById("region_end").value;
                let geneName = document.getElementById("gene_name").value;
                let showT2D = document.getElementById("t2d_region_filter").checked; // Show T2D SNPs in the region plot
                let chromosome = document.getElementById("selected_chromosome").value; // Get the selected chromosome

                // Convert selected populations Set to an Array
                let selectedPopulationsArray = Array.from(selectedPopulations);
                document.getElementById("selected_populations").value = selectedPopulationsArray.join(",");

                // Construct URL with selected populations and chromosome
                let url = `/population_analysis_region?chromosome=${chromosome}&start=${start}&end=${end}&gene_name=${geneName}`;
                selectedPopulationsArray.forEach(pop => url += `&selected_population=${pop}`);

                fetch(url)
                    .then(response => response.json())
                    .then(data => {
                        document.getElementById("region-plot-container").innerHTML = "<h2>Selected Region Tajima's D</h2>";

                        let colors = ["blue", "green", "purple", "orange", "cyan"];
                        let colorIndex = 0;

                        // Initialise arrays to store traces for combined plots
                        let combinedTajimaTraces = [];
                        let combinedClrTraces = [];

                        // Tajima's D plot for selected region
                        for (let pop in data.tajima_d_data) {
                            let plotDiv = document.createElement("div");
                            plotDiv.id = `region-plot-${pop}`;
                            document.getElementById("region-plot-container").appendChild(plotDiv);

                            let binPositions = data.tajima_d_data[pop].map(d => (d.bin_start + d.bin_end) / 2);
                            let tajimaValues = data.tajima_d_data[pop].map(d => d.tajima_d);

                            let lineTrace = {
                                x: binPositions,
                                y: tajimaValues,
                                mode: 'lines',
                                name: `Tajima's D - ${pop}`,
                                line: { color: colors[colorIndex] }
                            };

                            let tajimaTraces = [lineTrace];

                            // **Ensure only Tajima's D values are included in the combined plot**
                            combinedTajimaTraces.push(lineTrace);
                            colorIndex = (colorIndex + 1) % colors.length;

                            // **Map T2D SNPs to their correct Tajima's D bins**
                            if (showT2D && data.t2d_snp_data.length > 0) {
                                let snpPositions = data.t2d_snp_data.map(snp => snp.position);
                                let snpValues = snpPositions.map(pos => {
                                    let bin = data.tajima_d_data[pop].find(curr => pos >= curr.bin_start && pos <= curr.bin_end);
                                    return bin ? bin.tajima_d : null;
                                });

                                let t2dSnpTrace = {
                                    x: snpPositions,
                                    y: snpValues,
                                    mode: 'markers',
                                    text: data.t2d_snp_data.map(snp => snp.snp_id),
                                    textposition: "top center",
                                    marker: { color: 'red', size: 10 },
                                    name: 'T2D SNPs'
                                };
                                tajimaTraces.push(t2dSnpTrace);
                            }

                            let layout = {
                                title: `Tajima's D for ${pop}`,
                                xaxis: { title: "Chromosomal Position (bp)" },
                                yaxis: { title: "D" },
                                showlegend: true,
                                height: 600,
                                width: 1000,
                                margin: { l: 50, r: 50, t: 50, b: 50 }
                            };

                            Plotly.newPlot(plotDiv.id, tajimaTraces, layout);
                            colorIndex = (colorIndex + 1) % colors.length;

                            // Display mean and standard deviation next to each plot
                            let tajimaSummaryDiv = document.createElement("div");
                            tajimaSummaryDiv.innerHTML = `
                                <p><strong>Population:</strong> ${pop}</p>
                                <p><strong>Mean Tajima's D:</strong> ${data.summary_stats[pop].mean}</p>
                                <p><strong>Std Dev Tajima's D:</strong> ${data.summary_stats[pop].std_dev}</p>
                            `;
                            tajimaSummaryDiv.style.marginBottom = "20px";
                            tajimaSummaryDiv.style.fontSize = "16px";
                            tajimaSummaryDiv.style.fontWeight = "bold";
                            
                            document.getElementById("region-plot-container").appendChild(tajimaSummaryDiv);
                        }

                        // Combined plot with all selected populations
                        if (combinedTajimaTraces.length > 1) {
                            let combinedLayout = {
                                title: "Combined Tajima's D for All Selected Populations",
                                xaxis: { title: "Chromosomal Position (bp)" },
                                yaxis: { title: "D" },
                                showlegend: true,
                                height: 600,
                                width: 1200,
                                margin: { l: 50, r: 50, t: 50, b: 50 }
                            };

                            let combinedPlotDiv = document.createElement("div");
                            combinedPlotDiv.id = `region-plot-combined`;
                            document.getElementById("region-plot-container").appendChild(combinedPlotDiv);

                            if (combinedTajimaTraces.length > 0) {
                                Plotly.newPlot(combinedPlotDiv.id, combinedTajimaTraces, combinedLayout);
                            } else {
                                console.warn("No data found for selected populations in the region. The combined graph will be empty.");
                            }
                        }

                        // CLR plot for selected region 
                        document.getElementById("region-plot-container").innerHTML += "<h2>Selected Region CLR</h2>";

                        for (let pop in data.clr_data) {
                            let clrPlotDiv = document.createElement("div");
                            clrPlotDiv.id = `region-clr-plot-${pop}`;
                            document.getElementById("region-plot-container").appendChild(clrPlotDiv);

                            let clrPositions = data.clr_data[pop].map(d => d.position);
                            let clrValues = data.clr_data[pop].map(d => d.clr);

                            let clrTraces = [{
                                x: clrPositions,
                                y: clrValues,
                                mode: 'markers',
                                name: `CLR - ${pop}`,
                                marker: { color: colors[colorIndex], size: 6 }
                            }];

                            let significanceThresholdTrace = {
                                x: [Math.min(...clrPositions), Math.max(...clrPositions)],
                                y: [4.11, 4.11],
                                mode: 'lines',
                                name: 'Significance threshold adjusted for <br>spatial correlation (Î± = 0.05)',
                                line: {
                                    dash: 'dash',
                                    color: 'red',
                                    width: 2
                                }
                            };
                            clrTraces.push(significanceThresholdTrace);

                            combinedClrTraces.push({
                                x: clrPositions,
                                y: clrValues,
                                mode: 'markers',
                                name: `CLR - ${pop}`,
                                marker: { color: colors[colorIndex], size: 6 }
                            });
                            colorIndex = (colorIndex + 1) % colors.length;

                            if (showT2D) {
                                let snpPositions = data.t2d_snp_data.map(snp => snp.position);
                                let snpValues = snpPositions.map(pos => {
                                    let closestClr = data.clr_data[pop].reduce((closest, curr) => {
                                        return Math.abs(curr.position - pos) < Math.abs(closest.position - pos) ? curr : closest;
                                    }, data.clr_data[pop][0]);
                                    return closestClr ? closestClr.clr : null;
                                });

                                let t2dSnpTrace = {
                                    x: snpPositions,
                                    y: snpValues,
                                    mode: 'markers',
                                    text: data.t2d_snp_data.map(snp => snp.snp_id),
                                    textposition: "top center",
                                    marker: { color: 'red', size: 6 },
                                    name: 'T2D SNPs'
                                };
                                clrTraces.push(t2dSnpTrace);
                            }

                            let clrLayout = {
                                title: `CLR for ${pop}`,
                                xaxis: { title: "Chromosomal Position (bp)" },
                                yaxis: { title: "CLR" },
                                showlegend: true,
                                height: 600,
                                width: 1000,
                                margin: { l: 50, r: 50, t: 50, b: 50 }
                            };

                            Plotly.newPlot(clrPlotDiv.id, clrTraces, clrLayout);
                            colorIndex = (colorIndex + 1) % colors.length;

                            // Display mean and standard deviation next to each plot
                            let clrSummaryDiv = document.createElement("div");
                            clrSummaryDiv.innerHTML = `
                                <p><strong>Population:</strong> ${pop}</p>
                                <p><strong>Mean CLR:</strong> ${data.clr_summary_stats[pop].mean_clr}</p>
                                <p><strong>Std Dev CLR:</strong> ${data.clr_summary_stats[pop].std_dev_clr}</p>
                            `;
                            clrSummaryDiv.style.marginBottom = "20px";
                            clrSummaryDiv.style.fontSize = "16px";
                            clrSummaryDiv.style.fontWeight = "bold";
                            
                            document.getElementById("region-plot-container").appendChild(clrSummaryDiv);
                        }

                        // Combined CLR plot with all selected populations
                        if (combinedClrTraces.length > 1) {                   
                            let combinedClrLayout = {
                                title: "Combined CLR for All Selected Populations",
                                xaxis: { title: "Chromosomal Position (bp)" },
                                yaxis: { title: "CLR" },
                                showlegend: true,
                                height: 600,
                                width: 1200,
                                margin: { l: 50, r: 50, t: 50, b: 50 }
                            };

                            let combinedClrPlotDiv = document.createElement("div");
                            combinedClrPlotDiv.id = `region-clr-plot-combined`;
                            document.getElementById("region-plot-container").appendChild(combinedClrPlotDiv);

                            // Create a significance threshold line for the combined CLR plot
                            let significanceThresholdTrace = {
                                    x: [Math.min(...combinedClrTraces.map(trace => Math.min(...trace.x))), Math.max(...combinedClrTraces.map(trace => Math.max(...trace.x)))],
                                    y: [4.11, 4.11],
                                    mode: 'lines',
                                    name: 'Significance threshold adjusted for <br>spatial correlation (Î± = 0.05)',
                                    line: {
                                        dash: 'dash',
                                        color: 'red',
                                        width: 2
                                    }
                                };
                                combinedClrTraces.push(significanceThresholdTrace);

                            if (combinedClrTraces.length > 0) {
                                Plotly.newPlot(combinedClrPlotDiv.id, combinedClrTraces, combinedClrLayout);
                            } else {
                                console.warn("No data found for selected populations in the region. The combined CLR graph will be empty.");
                            }
                        }
                    });
            }

            // Function to download Tajima's D data for the selected region as a text file
            function downloadTajimaD() {
                let start = document.getElementById("region_start").value.trim();
                let end = document.getElementById("region_end").value.trim();
                let geneName = document.getElementById("gene_name").value.trim();
                let chromosome = "{{ selected_chromosome }}"; 
                let selectedPopulationsArray = Array.from(selectedPopulations);

                // Ensure at least one population is selected
                if (selectedPopulationsArray.length === 0) {
                    alert("Please select at least one population before downloading.");
                    return;
                }

                // Construct the download URL
                let url = `/download_tajima_d?chromosome=${chromosome}`;
                if (geneName) {
                    url += `&gene_name=${encodeURIComponent(geneName)}`;
                } else if (start && end) {
                    url += `&start=${start}&end=${end}`;
                } else {
                    alert("Please enter either a start and end position OR a gene name.");
                    return;
                }

                selectedPopulationsArray.forEach(pop => url += `&selected_population=${pop}`);

                // Create an invisible anchor tag to force the browser to download the file
                let link = document.createElement("a");
                link.href = url;
                link.setAttribute("download", `TajimaD_chr${chromosome}_${start || geneName}_${end || ""}.txt`);
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            }

            // Function to download CLR data for the selected region as a text file
            function downloadCLR() {
                let start = document.getElementById("region_start").value.trim();
                let end = document.getElementById("region_end").value.trim();
                let geneName = document.getElementById("gene_name").value.trim();
                let chromosome = document.getElementById("selected_chromosome").value; 
                let selectedPopulationsArray = Array.from(selectedPopulations);

                if (selectedPopulationsArray.length === 0) {
                    alert("Please select at least one population before downloading.");
                    return;
                }

                // Construct the download URL
                let url = `/download_clr?chromosome=${chromosome}`;
                if (geneName) {
                    url += `&gene_name=${encodeURIComponent(geneName)}`;
                } else if (start && end) {
                    url += `&start=${start}&end=${end}`;
                } else {
                    alert("Please enter either a start and end position OR a gene name.");
                    return;
                }

                selectedPopulationsArray.forEach(pop => url += `&selected_population=${pop}`);

                // Create an invisible anchor tag to force the browser to download the file
                let link = document.createElement("a");
                link.href = url;
                link.setAttribute("download", `CLR_chr${chromosome}_${start || geneName}_${end || ""}.txt`);
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            }
            updatePlot();
        </script>
    </div>
{% endblock %}